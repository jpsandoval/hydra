{"name":"Hydra","tagline":"","body":"### Hydra\r\n\r\nHydra is an extension of Spy profiler that support comparison between profiles gathered from multiple software versions. Hydra can be download from [smalltalkhub](http://smalltalkhub.com/#!/~juampi/Hydra).\r\n\r\nRequirements: Hydra take as input a set of Pharo images, each image have installed an specific version of a software project, SMark, Fuel, and Hydra itself. Each image have installed the benchmarks of the projects.\r\n\r\n- Hydra execute from a pharo image server, a number of benchmarks in all images (each contains a specific software version).\r\n- Hydra collect the number of messages that a benchmark sent during their execution.\r\n- It is also possible collect the number of sent message at method level.\r\n- Hydra also collect static information such as, classes, methods, packages, and method source code.\r\n\r\n### Project Images\r\n\r\nHydra provide three different ways to create images with each project versions.\r\n- Configuration-based, hydra provides an script that create an image for each version in the configuration. It copy a fresh image from the prototype folder (a folder with a clean image), then load the project version, fuel, smart, hydra and the project benchmarks.\r\n- Package-based, Hydra provides an script that create an image for each version of a simple package. This is  useful when projects have not a configuration and they are saved in smalltalkhub as using only one package.  For instance, Roassal, Shout, NeoCSV, NeoJSON, among others.\r\n- Pharo file server, some projects do not have a configuration, but they are in the continuous integration server of Pharo. Therefore, every single time that these projects are changed, a new Pharo version is released.  In this case, it is possible download al Pharo releases from the [server](http://files.pharo.org/). Hydra provides an script that create an image each time that a Pharo release modify an specific project version, such as, Nautilus, Morphic, among others.\r\n\r\n### Project & Benchmarks\r\nAt following, we list the benchmarks of each software version.\r\nMorphic : [benchmarks]() , [package versions]()\r\nSpec:  [benchmarks]() , [package versions]()\r\nNautilus:  [benchmarks]() , [package versions]()\r\nMondrian:  [benchmarks]() , [package versions]()\r\nRoassal:  [benchmarks]() , [package versions]()\r\nRubric:  [benchmarks]() , [package versions]()\r\nZinc:  [benchmarks]() , [package versions]()\r\nGraphET: [benchmarks]() , [package versions]()\r\nNeoCSV: [benchmarks]() , [package versions]()\r\nXMLSupport:  [benchmarks]() , [package versions]()\r\nRegex:  [benchmarks]() , [package versions]()\r\nShout:  [benchmarks]() , [package versions]()\r\nPetitParser:  [benchmarks]() , [package versions]()\r\nXPath:  [benchmarks]() , [package versions]()\r\nGTInspector: [benchmarks]() , [package versions]()\r\nSoup:  [benchmarks]() , [package versions]()\r\nNeoJSON:  [benchmarks]() , [package versions]()\r\n\r\n### LITO\r\n\r\nLITO is a tool that statically analyze the source code changes of a given version to determine if these change could cause a performance regressions. This analisys is done using run-time information gathered from the older versions. It is on [smalltalkhub](http://smalltalkhub.com/#!/~juampi/Lito)\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}